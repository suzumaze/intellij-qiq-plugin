{
  parserClass="com.github.suzumaze.intellijqiqplugin.parser.QiqParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Qiq"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.suzumaze.intellijqiqplugin.psi"
  psiImplPackage="com.github.suzumaze.intellijqiqplugin.psi.impl"

  elementTypeHolderClass="com.github.suzumaze.intellijqiqplugin.psi.QiqTypes"
  elementTypeClass="com.github.suzumaze.intellijqiqplugin.psi.QiqElementType"
  tokenTypeClass="com.github.suzumaze.intellijqiqplugin.psi.QiqTokenType"
}

qiqFile ::= item_*

private item_ ::= (qiqBlock | TEMPLATE_TEXT | CRLF)

qiqBlock ::= normalBlock | echoBlock

normalBlock ::= QIQ_OPENING_TAG qiqStatement* QIQ_CLOSING_TAG

echoBlock ::= QIQ_ECHO_OPENING_TAG qiqExpression QIQ_CLOSING_TAG

qiqStatement ::= ifStatement
               | foreachStatement
               | setBlockStatement
               | getBlockStatement
               | property
               | qiqExpression

ifStatement ::= IF '(' qiqExpression ')' ':' qiqStatement* (ELSE ':' qiqStatement*)? ENDIF

foreachStatement ::= FOREACH '(' qiqExpression AS KEY '=>' VALUE ')' ':' qiqStatement* ENDFOREACH

setBlockStatement ::= SETBLOCK '(' STRING_LITERAL ')' qiqStatement*

getBlockStatement ::= GETBLOCK '(' ')'

qiqExpression ::= property
                | functionCall
                | STRING_LITERAL
                | NUMBER
                | VARIABLE

property ::= (KEY? SEPARATOR VALUE?) | KEY

functionCall ::= IDENTIFIER '(' (qiqExpression (',' qiqExpression)*)? ')'

VARIABLE ::= '$' IDENTIFIER

KEY ::= IDENTIFIER

VALUE ::= (IDENTIFIER | STRING_LITERAL | NUMBER)